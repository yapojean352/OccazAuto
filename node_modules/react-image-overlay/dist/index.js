'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

var style = {
  container: {
    position: 'relative'
  },
  mainImage: {
    width: '100%',
    height: '100%',
    objectFit: 'cover',
    backgroundRepeat: 'no-repeat'
  },
  overlayImage: {
    position: 'absolute',
    objectFit: 'cover',
    backgroundRepeat: 'no-repeat'
  }
};

var Overlay = function (_Component) {
  inherits(Overlay, _Component);

  function Overlay() {
    classCallCheck(this, Overlay);

    var _this = possibleConstructorReturn(this, (Overlay.__proto__ || Object.getPrototypeOf(Overlay)).call(this));

    _this.canvasRef = React__default.createRef();
    return _this;
  }

  createClass(Overlay, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var _props = this.props,
          url = _props.url,
          overlayUrl = _props.overlayUrl,
          watermark = _props.watermark;

      if (watermark) {
        var context = this.canvasRef;

        var img = new Image();
        var overlay = new Image();
        img.src = url;

        img.onload = function () {
          overlay.src = overlayUrl;
          overlay.onload = function () {
            context.drawImage(img, 0, 0);
            context.drawImage.apply(context, toConsumableArray(_this2.overlayCanvas(overlay)));
          };
        };
      }
    }
  }, {
    key: 'overlayCanvas',
    value: function overlayCanvas(overlay) {
      var _props2 = this.props,
          position = _props2.position,
          overlayHeight = _props2.overlayHeight,
          imageHeight = _props2.imageHeight,
          imageWidth = _props2.imageWidth,
          overlayWidth = _props2.overlayWidth,
          overlayPadding = _props2.overlayPadding;

      switch (position) {
        case 'topLeft':
          return [overlay, overlayPadding, overlayPadding];
        case 'topRight':
          return [overlay, imageWidth - overlayWidth - overlayPadding, overlayPadding];
        case 'bottomLeft':
          return [overlay, overlayPadding, imageHeight - overlayHeight - overlayPadding];
        case 'center':
          return [overlay, Math.floor(imageWidth / 2 - overlayWidth / 2), Math.floor(imageHeight / 2 - overlayHeight / 2)];
        default:
          return [overlay, imageHeight - overlayHeight - overlayPadding, imageWidth - overlayWidth - overlayPadding];
      }
    }
  }, {
    key: 'overlayPosition',
    value: function overlayPosition() {
      var _props3 = this.props,
          position = _props3.position,
          overlayPadding = _props3.overlayPadding;

      switch (position) {
        case 'topLeft':
          return {
            top: overlayPadding,
            left: overlayPadding
          };
        case 'topRight':
          return {
            top: overlayPadding,
            right: overlayPadding
          };
        case 'bottomLeft':
          return {
            bottom: overlayPadding,
            left: overlayPadding
          };
        case 'center':
          return {
            right: 0,
            left: 0,
            top: 0,
            bottom: 0,
            margin: 'auto auto'
          };
        default:
          return {
            bottom: overlayPadding,
            right: overlayPadding
          };
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var container = style.container,
          mainImage = style.mainImage,
          overlayImage = style.overlayImage;
      var _props4 = this.props,
          url = _props4.url,
          imageHeight = _props4.imageHeight,
          imageWidth = _props4.imageWidth,
          overlayHeight = _props4.overlayHeight,
          overlayWidth = _props4.overlayWidth,
          position = _props4.position,
          overlayUrl = _props4.overlayUrl,
          watermark = _props4.watermark;


      if (watermark) {
        return React__default.createElement('canvas', {
          ref: function ref(c) {
            return _this3.canvasRef = c.getContext('2d');
          },
          height: imageHeight,
          width: imageWidth
        });
      }

      return React__default.createElement(
        'div',
        {
          style: _extends({}, container, {
            height: imageHeight,
            width: imageWidth
          })
        },
        React__default.createElement('img', {
          src: url,
          alt: 'main',
          style: _extends({}, mainImage, {
            backgroundImage: 'url("' + url + '")'
          })
        }),
        React__default.createElement('img', {
          src: overlayUrl,
          alt: 'overlay',
          style: _extends({}, overlayImage, {
            height: overlayHeight,
            width: overlayWidth
          }, this.overlayPosition(position))
        })
      );
    }
  }]);
  return Overlay;
}(React.Component);

Overlay.propTypes = {
  url: PropTypes.string.isRequired,
  overlayUrl: PropTypes.string.isRequired,
  imageHeight: PropTypes.number,
  imageWidth: PropTypes.number,
  overlayHeight: PropTypes.number,
  overlayWidth: PropTypes.number,
  position: PropTypes.string,
  watermark: PropTypes.bool,
  overlayPadding: PropTypes.number
};
Overlay.defaultProps = {
  imageHeight: 250,
  imageWidth: 250,
  overlayHeight: 30,
  overlayWidth: 30,
  position: null,
  watermark: true,
  overlayPadding: 10
};

module.exports = Overlay;
//# sourceMappingURL=index.js.map
